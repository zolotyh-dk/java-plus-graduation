{
	"info": {
		"_postman_id": "fd4ffdc0-705a-450d-8d39-7c4eef7743f8",
		"name": "\"Explore with me plus\" API статистика Spring Cloud",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23073145",
		"_collection_link": "https://universal-shadow-295426.postman.co/workspace/My-Workspace~4200f6aa-0504-44b1-8a1d-707d0dcbd5ce/collection/13708500-fd4ffdc0-705a-450d-8d39-7c4eef7743f8?action=share&source=collection_link&creator=23073145"
	},
	"item": [
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Адрес Eureka",
					"const eurekaHost = 'http://localhost:8761';",
					"const appNames = [\"STATS-SERVER\"];",
					"",
					"appNames.forEach((appName) => {",
					"  pm.sendRequest({",
					"    url: `${eurekaHost}/eureka/v2/apps/${appName}`,",
					"    method: 'GET',",
					"    header: {",
					"        'Accept': 'application/json'",
					"    }",
					"}, function (err, res) {",
					"    if (err) {",
					"        console.log('Ошибка запроса к Eureka: ', err);",
					"        return;",
					"    }",
					"",
					"    // Проверяем успешность ответа",
					"    if (res.code === 200) {",
					"        let jsonData = res.json();",
					"        ",
					"        // Пытаемся достать первый инстанс сервиса (если таких несколько)",
					"        let instance = jsonData.application.instance[0];",
					"",
					"        if (instance) {",
					"            let host = instance.hostName;",
					"            let port = instance.port['$']; // Порт сервиса",
					"            ",
					"            // Сохраняем host и port в переменные окружения",
					"            pm.collectionVariables.set(`baseUrl`, \"http://localhost:\" + port);",
					"            ",
					"        } else {",
					"            console.error('Инстанс сервиса не найден.');",
					"        }",
					"    } else {",
					"        console.error('Не удалось получить данные из Eureka: статус ', res.status);",
					"    }",
					"});",
					"})",
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:9090\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addPost(post, verbose=null) {",
					"        return this.post(\"/hit\", post, \"Ошибка при сохранении информации о запросе к эндпойнту: \", verbose);",
					"    } ",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"http://localhost:8080\", \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"http://localhost:8080\", \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"http://localhost:8080\", \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"},\"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, \"http://localhost:8080\", body, errorText);",
					"    }",
					"",
					"    async post(path, body, newBaseUrl=null, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, newBaseUrl, body, errorText);",
					"    }",
					"",
					"    async sendRequest(method, path, newBaseUrl=null, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            let request;",
					"            if (newBaseUrl==null)",
					"                 request = {",
					"                    url: this.baseUrl + path,",
					"                    method: method,",
					"                    body: body == null ? \"\" : JSON.stringify(body),",
					"                    header: { \"Content-Type\": \"application/json\" },",
					"                };",
					"            else",
					"                request = {",
					"                    url: newBaseUrl + path,",
					"                    method: method,",
					"                    body: body == null ? \"\" : JSON.stringify(body),",
					"                    header: { \"Content-Type\": \"application/json\" },",
					"                };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    try{",
					"                        resolve(response.json());",
					"                    } catch(err){",
					"                        resolve(response);",
					"                    }",
					"                    ",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getPost() {",
					"        return {",
					"            app: \"ewm-main-service\",",
					"            uri: \"/events/\" + pm.variables.replaceIn('{{$randomInt}}'),",
					"            ip: pm.variables.replaceIn('{{$randomIP}}'),",
					"            timestamp: this.getPastDateTime()",
					"        }",
					"    }",
					"",
					"     getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"    ",
					"    getCompilation(...eventIds) { ",
					"        return { ",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'), ",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'), ",
					"            events: eventIds ",
					"        }; ",
					"    }",
					"",
					"    getPastDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.subtract(hourShift, 'hour');",
					"        m.subtract(minuteShift, 'minute');",
					"        m.subtract(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"key": "uri",
			"value": "1"
		},
		{
			"key": "source",
			"value": ""
		}
	]
}
